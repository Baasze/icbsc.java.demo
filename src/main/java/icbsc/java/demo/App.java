/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package icbsc.java.demo;

import icbsc.java.eckey.*;
import icbsc.java.javarpcprovider.implementations.*;
import icbsc.java.abiserializationprovider.*;
import icbsc.java.keysignatureprovider.*;

import java.util.List;
import java.security.SignatureException;
import java.util.ArrayList;

import one.block.eosiojava.implementations.ABIProviderImpl;
import one.block.eosiojava.interfaces.IABIProvider;
import one.block.eosiojava.interfaces.IRPCProvider;
import one.block.eosiojava.interfaces.ISerializationProvider;
import one.block.eosiojava.models.rpcProvider.Action;
import one.block.eosiojava.models.rpcProvider.Authorization;
import one.block.eosiojava.models.rpcProvider.response.PushTransactionResponse;
import one.block.eosiojava.session.TransactionProcessor;
import one.block.eosiojava.session.TransactionSession;
import com.google.gson.Gson;

public class App {
    public static void main(String[] args) {
        String priv = "PVT_SM2_Yxo3RKaoUW2hHQt3BJyU2wmQjjJ1ADatxCo3LxwBK9LSyH3sX";
        String pub = "PUB_SM2_7VZMGC13BBjvN8PJx7CdQK3fFg9ZWtjMBrTx3h8hL3faaiPfmV";
        String signedStr = "SIG_SM2_HDqVAQzQjYbKsgE8s64adP8V9Vfn9NSvvzSzpvsNNyobLy28CPaeuXpKWGxWsFiv4LvmmRQWa6rmjjNMJ4f83t9yTAoXNG";
        String msg = "Hello World!";
        ECKey key = ECKey.ECKeyFromPrivate(priv);
        assert (key.GetPublic().equals(pub));

        try {
            key.verifyMessage(msg.getBytes(),signedStr);
        } catch (SignatureException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        try {
            String recoverKey = ECKey.signedMessageToKey(msg.getBytes(), signedStr);
            assert (recoverKey.equals(pub));
        } catch (SignatureException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        // 默认SM2公私密钥转换
        for (int i = 0; i < 1; i++) {
            ECKey sm2key = new ECKey();
            System.out.println(sm2key.GetPrivate());
            System.out.println(sm2key.GetPublic());
            assert(ECKey.PrivateToPublic(sm2key.GetPrivate()).equals(sm2key.GetPublic()));

            String message = "Hello World!";
            // 内部对String做sha256 hash后签名
            String sigStr = sm2key.sign(message);
            System.out.println(sigStr);

            // 内部对 byte[] 做sha256 hash后签名
            String sigStr1 = sm2key.sign(message.getBytes());
            System.out.println(sigStr1);
            assert (sigStr.equals(sigStr1));

            try {
                sm2key.verifyMessage(message.getBytes(), sigStr);
            } catch (SignatureException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }

            String recoverKey = "";
            try {
                recoverKey = ECKey.signedMessageToKey(message.getBytes(), sigStr);
            } catch (SignatureException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
            assert (recoverKey.equals(sm2key.GetPublic()));
            System.out.println("recoverKey: " + recoverKey);
        }
        
        System.out.println("transaction------------------");

        // 发交易
        try {
            String privateKey = "PVT_SM2_hrjc7PFDDjSNgGdsP33uXMBeV2abGzNHumnPyMhfhiCbXoKMh";

            IRPCProvider rpcProvider = new JavaRpcProviderImpl("http://xxx.xxx.xxx.xxx:8888");
            ISerializationProvider serializationProvider = new AbiSerializationProviderImpl();
            IABIProvider abiProvider = new ABIProviderImpl(rpcProvider, serializationProvider);
            SignatureProviderImpl signatureProvider = new SignatureProviderImpl();
            
            signatureProvider.importKey(privateKey);
            List<String> keys = signatureProvider.getAvailableKeys();
            System.out.println(keys.get(0));
            
            TransactionSession session = new TransactionSession(
                    serializationProvider,
                    rpcProvider,
                    abiProvider,
                    signatureProvider
            );
            
            TransactionProcessor processor = session.getTransactionProcessor();
            
            String jsonData = "{\n" +
                    "\"from\": \"xiaobaiyang3\",\n" +
                    "\"to\": \"xiaobaiyang1\",\n" +
                    "\"quantity\": \"0.0001 YLZ\",\n" +
                    "\"memo\" : \"test\"\n" +
                    "}";
            
            List<Authorization> authorizations = new ArrayList<>();
            authorizations.add(new Authorization("xiaobaiyang3", "active"));
            List<Action> actions = new ArrayList<>();
            actions.add(new Action("icbs.token", "transfer", authorizations, jsonData));
            processor.prepare(actions);
            PushTransactionResponse pushTransactionResponse = processor.signAndBroadcast();
            System.out.println(new Gson().toJson(pushTransactionResponse));
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }
}
